using System;using System.Data;using System.Data.SqlClient;using System.Collections.Generic;namespace MyWeb.Data{	public class GroupImagesDAL : SqlDataProvider	{		#region[GroupImages_GetById]		public List<GroupImages> GroupImages_GetById(string Id)		{			List<Data.GroupImages> list = new List<Data.GroupImages>();			Data.GroupImages obj = new Data.GroupImages();			SqlDataReader dr = null;			try			{				using (SqlCommand dbCmd = new SqlCommand("sp_GroupImages_GetById", GetConnection()))				{					dbCmd.CommandType = CommandType.StoredProcedure;					dbCmd.Parameters.Add(new SqlParameter("@Id", Id));					dr = dbCmd.ExecuteReader();					if (dr.HasRows)					{						while (dr.Read())						{							list.Add(obj.GroupImagesIDataReader(dr));							}						//conn.Close();					}				}			}			catch (Exception)			{			}			finally			{
                if (dr != null)
                {
                    dr.Close();
                }				obj = null;			}			return list;		}		#endregion		#region[GroupImages_GetByTop]		public List<GroupImages> GroupImages_GetByTop(string Top, string Where, string Order)		{			List<Data.GroupImages> list = new List<Data.GroupImages>();			Data.GroupImages obj = new Data.GroupImages();			SqlDataReader dr = null;			try			{				using (SqlCommand dbCmd = new SqlCommand("sp_GroupImages_GetByTop", GetConnection()))				{					dbCmd.CommandType = CommandType.StoredProcedure;					dbCmd.Parameters.Add(new SqlParameter("@Top", Top));					dbCmd.Parameters.Add(new SqlParameter("@Where", Where));					dbCmd.Parameters.Add(new SqlParameter("@Order", Order));					dr = dbCmd.ExecuteReader();					if (dr.HasRows)					{						while (dr.Read())						{							list.Add(obj.GroupImagesIDataReader(dr));						}						//conn.Close();					}				}			}			catch (Exception)			{			}			finally			{
                if (dr != null)
                {
                    dr.Close();
                }				obj = null;			}			return list;		}		#endregion		#region[GroupImages_GetByAll]		public List<GroupImages> GroupImages_GetByAll()		{			List<Data.GroupImages> list = new List<Data.GroupImages>();			Data.GroupImages obj = new Data.GroupImages();			SqlDataReader dr = null;			try			{				using (SqlCommand dbCmd = new SqlCommand("sp_GroupImages_GetByAll", GetConnection()))			{				dbCmd.CommandType = CommandType.StoredProcedure;					dr = dbCmd.ExecuteReader();					if (dr.HasRows)					{						while (dr.Read())						{							list.Add(obj.GroupImagesIDataReader(dr));						}						//conn.Close();					}				}			}			catch (Exception)			{			}			finally			{
                if (dr != null)
                {
                    dr.Close();
                }				obj = null;			}			return list;		}		#endregion		#region[GroupImages_Insert]		public bool GroupImages_Insert(GroupImages data)		{			using (SqlCommand dbCmd = new SqlCommand("sp_GroupImages_Insert", GetConnection()))			{				dbCmd.CommandType = CommandType.StoredProcedure;				dbCmd.Parameters.Add(new SqlParameter("@Name", data.Name));				dbCmd.Parameters.Add(new SqlParameter("@Level", data.Level));				dbCmd.Parameters.Add(new SqlParameter("@Ord", data.Ord));				dbCmd.Parameters.Add(new SqlParameter("@Active", data.Active));				dbCmd.ExecuteNonQuery();			}			//Clear cache			System.Web.HttpContext.Current.Cache.Remove("GroupImages");			return true;		}		#endregion		#region[GroupImages_Update]		public bool GroupImages_Update(GroupImages data)		{			using (SqlCommand dbCmd = new SqlCommand("sp_GroupImages_Update", GetConnection()))			{				dbCmd.CommandType = CommandType.StoredProcedure;				dbCmd.Parameters.Add(new SqlParameter("@Id", data.Id));				dbCmd.Parameters.Add(new SqlParameter("@Name", data.Name));				dbCmd.Parameters.Add(new SqlParameter("@Level", data.Level));				dbCmd.Parameters.Add(new SqlParameter("@Ord", data.Ord));				dbCmd.Parameters.Add(new SqlParameter("@Active", data.Active));				dbCmd.ExecuteNonQuery();			}			//Clear cache			System.Web.HttpContext.Current.Cache.Remove("GroupImages");			return true;		}		#endregion		#region[GroupImages_Delete]		public bool GroupImages_Delete(string Id)		{			using (SqlCommand dbCmd = new SqlCommand("sp_GroupImages_Delete", GetConnection()))			{				dbCmd.CommandType = CommandType.StoredProcedure;				dbCmd.Parameters.Add(new SqlParameter("@Id", Id));				dbCmd.ExecuteNonQuery();			}			//Clear cache			System.Web.HttpContext.Current.Cache.Remove("GroupImages");			return true;		}		#endregion			}}