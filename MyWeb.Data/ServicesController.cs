using System;using System.Data;using System.Data.SqlClient;using System.Collections.Generic;namespace MyWeb.Data{	public class ServicesDAL : SqlDataProvider	{		#region[Services_GetById]		public List<Services> Services_GetById(string Id)		{			List<Data.Services> list = new List<Data.Services>();			Data.Services obj = new Data.Services();			SqlDataReader dr = null;			try			{				using (SqlCommand dbCmd = new SqlCommand("sp_Services_GetById", GetConnection()))				{					dbCmd.CommandType = CommandType.StoredProcedure;					dbCmd.Parameters.Add(new SqlParameter("@Id", Id));					dr = dbCmd.ExecuteReader();					if (dr.HasRows)					{						while (dr.Read())						{							list.Add(obj.ServicesIDataReader(dr));							}						//conn.Close();					}				}			}			catch (Exception ex)			{
				throw ex;			}			finally			{
                if (dr != null)
                {
                    dr.Close();
                }				obj = null;			}			return list;		}		#endregion		#region[Services_GetByTop]		public List<Services> Services_GetByTop(string Top, string Where, string Order)		{			List<Data.Services> list = new List<Data.Services>();			Data.Services obj = new Data.Services();			SqlDataReader dr = null;			try			{				using (SqlCommand dbCmd = new SqlCommand("sp_Services_GetByTop", GetConnection()))				{					dbCmd.CommandType = CommandType.StoredProcedure;					dbCmd.Parameters.Add(new SqlParameter("@Top", Top));					dbCmd.Parameters.Add(new SqlParameter("@Where", Where));					dbCmd.Parameters.Add(new SqlParameter("@Order", Order));					dr = dbCmd.ExecuteReader();					if (dr.HasRows)					{						while (dr.Read())						{							list.Add(obj.ServicesIDataReader(dr));						}						//conn.Close();					}				}			}			catch (Exception ex)			{
				throw ex;			}			finally			{
                if (dr != null)
                {
                    dr.Close();
                }				obj = null;			}			return list;		}		#endregion		#region[Services_GetByAll]		public List<Services> Services_GetByAll()		{			List<Data.Services> list = new List<Data.Services>();			Data.Services obj = new Data.Services();			SqlDataReader dr = null;			try			{				using (SqlCommand dbCmd = new SqlCommand("sp_Services_GetByAll", GetConnection()))			{				dbCmd.CommandType = CommandType.StoredProcedure;					dr = dbCmd.ExecuteReader();					if (dr.HasRows)					{						while (dr.Read())						{							list.Add(obj.ServicesIDataReader(dr));						}						//conn.Close();					}				}			}			catch (Exception ex)			{
				throw ex;			}			finally			{
                if (dr != null)
                {
                    dr.Close();
                }				obj = null;			}			return list;		}		#endregion		#region[Services_Insert]		public bool Services_Insert(Services data)		{			using (SqlCommand dbCmd = new SqlCommand("sp_Services_Insert", GetConnection()))			{				dbCmd.CommandType = CommandType.StoredProcedure;				dbCmd.Parameters.Add(new SqlParameter("@Name", data.Name));				dbCmd.Parameters.Add(new SqlParameter("@Active", data.Active));				dbCmd.ExecuteNonQuery();			}			//Clear cache			System.Web.HttpContext.Current.Cache.Remove("Services");			return true;		}		#endregion		#region[Services_Update]		public bool Services_Update(Services data)		{			using (SqlCommand dbCmd = new SqlCommand("sp_Services_Update", GetConnection()))			{				dbCmd.CommandType = CommandType.StoredProcedure;				dbCmd.Parameters.Add(new SqlParameter("@Id", data.Id));				dbCmd.Parameters.Add(new SqlParameter("@Name", data.Name));				dbCmd.Parameters.Add(new SqlParameter("@Active", data.Active));				dbCmd.ExecuteNonQuery();			}			//Clear cache			System.Web.HttpContext.Current.Cache.Remove("Services");			return true;		}		#endregion		#region[Services_Delete]		public bool Services_Delete(string Id)		{			using (SqlCommand dbCmd = new SqlCommand("sp_Services_Delete", GetConnection()))			{				dbCmd.CommandType = CommandType.StoredProcedure;				dbCmd.Parameters.Add(new SqlParameter("@Id", Id));				dbCmd.ExecuteNonQuery();			}			//Clear cache			System.Web.HttpContext.Current.Cache.Remove("Services");			return true;		}		#endregion			}}